#!/usr/bin/python

import os
import sys
import argparse
import numpy as np
import copy
from subprocess import Popen, PIPE

from scai_utils import *

MKDFA_BIN = "/home/cais/asr/julius-3.5.2-quickstart-linux/bin/mkdfa.pl"

if __name__ == "__main__":
    ap = argparse.ArgumentParser(description="Set up files in a data directory generated by the MATLAB script formatDirForJulian.m and call julian for recognition and alignment")
    ap.add_argument("inDir", help="Input directory, generated by formatDirForJulian.m")

    if len(sys.argv) == 1:
        ap.print_help()
        sys.exit(0)

    args = ap.parse_args()
    inDir = args.inDir

    check_dir(inDir)

    # Generate the wavlist
    wavflist = os.path.join(inDir, "wavflist")
    if inDir.count("APSTV") > 0 or inDir.endswith('_S') or inDir.endswith('_T'):
        saydo('make_file_list.py "%s/rep_*.wav" %s' % \
              (inDir, wavflist))
    elif inDir.count("SEQ") > 0 and inDir.count('fMRI') > 0:
        saydo('make_file_list.py "%s/test*.wav" %s' % \
              (inDir, wavflist))
    elif inDir.count("SEQ") > 0:
        saydo('make_file_list.py "%s/run*.wav" %s' % \
              (inDir, wavflist))
    else:
        raise Exception, "Unrecognized directory name format"
    
    check_file(wavflist)
    

    # Call dos2unix to convert the format of the gram files
    gram_grammar = os.path.join(inDir, "gram.grammar")
    gram_voca = os.path.join(inDir, "gram.voca")
    check_file(gram_grammar)
    check_file(gram_voca)

    saydo("dos2unix %s" % gram_grammar)
    saydo("dos2unix %s" % gram_voca)
    
    # Call mkdfa.pl to generate the dfa and dict files
    mkdfa_cmd = "%s %s" % (MKDFA_BIN, os.path.join(inDir, "gram"))
    saydo(mkdfa_cmd)

    # Use mk_jconf.py to generate the jconf file
    saydo("mk_jconf.py %s" % inDir)
    
    jconf = os.path.join(inDir, "jconf")
    check_file(jconf)

    tiedList = os.path.join(inDir, "tiedList")
    if not os.path.isfile(tiedList):
        tiedList = os.path.join(inDir, "tiedlist")
    check_file(tiedList)

    # Call julian and find out which triphones are missing
    jcmd = "julian -input rawfile -filelist %s -C %s -palign" % \
           (wavflist, jconf)
    #saydo(jcmd)
    (sout, serr) = Popen(jcmd.split(' '), stdout=PIPE, stderr=PIPE)\
                   .communicate()

    sout = sout.split('\n')
    
    if sout.count("////// Missing phones:") == 1:
        iline0 = sout.index("////// Missing phones:")
        iline1 = sout.index("//////////////////////")
        mtt = sout[iline0 + 1 : iline1] # Missing triphone text

        tlf = open(tiedList, "rt")
        tlt = tlf.read().split('\n')
        tlf.close()

        while tlt.count('') > 0:
            tlt.remove('')
        tlt1 = copy.deepcopy(tlt)

        for (i0, mt) in enumerate(mtt):
            p1 = mt.split('-')[0]
            p2 = mt.split('-')[1].split('+')[0]
            p3 = mt.split('-')[1].split('+')[1]

            if mt.count(' or ') == 1:
                mt = mt.split(' ')[-1]                

            cands = []
            cscores = []

            for (i1, tline) in enumerate(tlt):
                if len(tline) == 0:
                    continue

                if tline.count(' ') > 0:
                    continue

                if tline.count(' or ') > 0:
                    continue

                if tline.count('-') == 1 and tline.count('+') == 1:
                    t_p1 = tline.split('-')[0]
                    t_p2 = tline.split('-')[1].split('+')[0]
                    t_p3 = tline.split('-')[1].split('+')[1]
                elif tline.count('-') == 1:
                    t_p1 = tline.split('-')[0]
                    t_p2 = tline.split('-')[1]
                    t_p3 = ''
                elif tline.count('+') == 1:
                    t_p1 = ''
                    t_p2 = tline.split('+')[0]
                    t_p3 = tline.split('+')[1]
                else:
                    t_p1 = ''
                    t_p2 = tline
                    t_p3 = ''
                    
                if t_p2 == p2:
                    cands.append(tline)
                    if t_p1 == p1:
                        cscores.append(2)
                    elif t_p3 == p3:
                        cscores.append(1)
                    else:
                        cscores.append(0)

            if len(cands) == 0:
                raise Exception, "Cannot find a suitable substitute for missing triphone: %s" % (mt)
            
            cscores = np.array(cscores)
            t_max = np.max(cscores)
            idx_max = np.nonzero(cscores == t_max)[0][0]
            st = cands[idx_max]

            print("%s --> %s" % (mt, st))
            tlt1.append("%s %s" % (mt, st))
        
        # Write to tiedlist file
        tlf = open(tiedList, "wt")
        for (i0, tline) in enumerate(tlt1):
            tlf.write("%s\n" % tline)
        tlf.close()

        print("Updated %s" % tiedList)
    
    asr_out = os.path.join(inDir, "asr_out")
    saydo("%s > %s" % (jcmd, asr_out))
